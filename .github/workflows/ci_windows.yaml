name: CI - Windows

on: [pull_request, push, workflow_dispatch]

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: ${{ github.head_ref != '' }}

jobs:
  ci:
    name: Build
    runs-on: windows-latest

    strategy:
      fail-fast: false
      matrix:
        libt_version: ["2.0.8", "1.2.18"]

    env:
      boost_path: "${{ github.workspace }}/../boost"
      libtorrent_path: "${{ github.workspace }}/libtorrent"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup devcmd
        uses: ilammy/msvc-dev-cmd@v1

      - name: Install build tools
        run: |
          choco install ninja

      # use the preinstalled vcpkg from image
      # https://github.com/actions/virtual-environments/blob/main/images/win/Windows2019-Readme.md#package-management
      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v10
        with:
          vcpkgDirectory: C:/vcpkg
          doNotUpdateVcpkg: true  # the preinstalled vcpkg is updated regularly

      - name: Install dependencies from vcpkg
        run: |
          ${{ env.RUNVCPKG_VCPKG_ROOT }}/vcpkg.exe install `
          boost-circular-buffer:x64-windows-static boost-stacktrace:x64-windows-static openssl:x64-windows-static qt5-base:x64-windows-static qt5-svg:x64-windows-static qt5-tools:x64-windows-static qt5-winextras:x64-windows-static libtorrent:x64-windows-static

      - name: Build qBittorrent
        run: |
          cmake `
            -B build `
            -G "Ninja" `
            -DCMAKE_BUILD_TYPE=RelWithDebInfo `
            -DCMAKE_CXX_FLAGS="/WX" `
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON `
            -DCMAKE_TOOLCHAIN_FILE="${{ env.RUNVCPKG_VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake" `
            -DVCPKG_TARGET_TRIPLET="x64-windows-static" `
            -DMSVC_RUNTIME_DYNAMIC=OFF `
            -DQT6=OFF `
            --graphviz=build/target_graph.dot
          cmake --build build --target qbt_update_translations
          cmake --build build
          cmake --build build --target check

      - name: Prepare build artifacts
        run: |
          mkdir upload
          copy build/qbittorrent.exe upload
          copy build/qbittorrent.pdb upload
          copy dist/windows/qt.conf upload
          # runtimes
          copy "${{ env.Qt6_DIR }}/bin/Qt6Core.dll" upload
          copy "${{ env.Qt6_DIR }}/bin/Qt6Gui.dll" upload
          copy "${{ env.Qt6_DIR }}/bin/Qt6Network.dll" upload
          copy "${{ env.Qt6_DIR }}/bin/Qt6Sql.dll" upload
          copy "${{ env.Qt6_DIR }}/bin/Qt6Svg.dll" upload
          copy "${{ env.Qt6_DIR }}/bin/Qt6Widgets.dll" upload
          copy "${{ env.Qt6_DIR }}/bin/Qt6Xml.dll" upload
          mkdir upload/plugins/iconengines
          copy "${{ env.Qt6_DIR }}/plugins/iconengines/qsvgicon.dll" upload/plugins/iconengines
          mkdir upload/plugins/imageformats
          copy "${{ env.Qt6_DIR }}/plugins/imageformats/qico.dll" upload/plugins/imageformats
          copy "${{ env.Qt6_DIR }}/plugins/imageformats/qsvg.dll" upload/plugins/imageformats
          mkdir upload/plugins/platforms
          copy "${{ env.Qt6_DIR }}/plugins/platforms/qwindows.dll" upload/plugins/platforms
          mkdir upload/plugins/sqldrivers
          copy "${{ env.Qt6_DIR }}/plugins/sqldrivers/qsqlite.dll" upload/plugins/sqldrivers
          mkdir upload/plugins/styles
          copy "${{ env.Qt6_DIR }}/plugins/styles/qwindowsvistastyle.dll" upload/plugins/styles
          # cmake additionals
          mkdir upload/cmake
          copy build/compile_commands.json upload/cmake
          copy build/target_graph.dot upload/cmake
          mkdir upload/cmake/libtorrent
          copy libtorrent/build/compile_commands.json upload/cmake/libtorrent

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: qBittorrent-CI_Windows-x64_libtorrent-${{ matrix.libt_version }}
          path: upload
